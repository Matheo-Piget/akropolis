@startuml

!define TILE_SIZE 20
!define BORDER_SIZE 1

skinparam class {
    BackgroundColor LightCyan
    BorderColor Black
    ArrowColor Black
    FontName Arial
    FontSize 20
}

skinparam stereotypeCBackgroundColor LightGray
skinparam stereotypeCBorderColor Black

skinparam package {
            BackgroundColor LightSkyBlue
            BorderColor DarkSlateGray
            FontColor DarkSlateGray
            ArrowColor DarkSlateGray
            FontName Arial
            FontSize 30
}

package model <<Node>>{

    class Board {
        - Grid grid
        ==
        + Board()
        ==
        + getHexagon(int x, int y): Hexagon
        + getScore(): int
        ==
        + display(): void
        + getGrid(): Grid
        + addTile(Tile tile): void
    }

    class Game {
        - List<Player> players
        - StackTiles stackTiles
        - List<Tile> tableTiles
        - Player currentPlayer
        - Board board
        ==
        + Game(List<Player> players)
        ==
        + getBoard(): Board
        + getPlayers(): List<Player>
        + getTableTiles(): List<Tile>
        + getCurrentPlayer(): Player
        + getStackTiles(): StackTiles
        + setCurrentPlayer(Player currentPlayer): void
        + addPlayer(Player player): void
        - getNumberOfPlayers(): int
        - switchSizePlayers(): int
        + startGame(): void
        + startTurn(Player player): void
        + endTurn(Player player): void
        - getNextPlayer(): Player
        + isGameOver(): boolean
        + getWinner(): Player
    }

    class Player {
        - List<Tile> ownedTiles
        - Tile selectedTile
        - int score
        ==
        + Player()
        ==
        + getOwnedTiles(): List<Tile>
        + getSelectedTile(): Tile
        + setOwnedTiles(List<Tile> ownedTiles): void
        + setSelectedTile(Tile selectedTile): void
        + getScore(): int
        + setScore(int score): void
    }

    class Tile {
        - ArrayList<Hexagon> hexagons
        ==
        + Tile(Hexagon tile1, Hexagon tile2, Hexagon tile3)
        ==
        + rotate(): void
        + exchange(Hexagon hexagon1, Hexagon hexagon2): void
        + getHexagons(): ArrayList<Hexagon>
    }

    class Hexagon {
        - Point3D position
        - Grid grid
        - Hexagon above
        - Hexagon below
        - Tile tile
        - boolean isVisited
        ==
        + Hexagon(Point3D p)
        + Hexagon(Point3D p, Grid grid)
        ==
        + getType(): String
        + setGrid(Grid grid): void
        + getElevation(): int
        + getX(): int
        + getY(): int
        + getZ(): int
        + getPosition(): Point3D
        + getAbove(): Hexagon
        + getBelow(): Hexagon
        ==
        + setAbove(Hexagon aboveTile): void
        + setBelow(Hexagon belowTile): void
        ==
        + getNeighbors(): ArrayList<Hexagon>
        + hasAbove(): boolean
        + hasBelow(): boolean
        + isAdjacent(Hexagon t): boolean
    }

    class Grid {
            - Map<Point3D, Hexagon> hexagons
            ==
            + Grid()
            ==
            + getHexagons(): Map<Point3D, Hexagon>
            + canAdd(Hexagon hexagon, Point3D p): boolean
            + addTile(Tile tile): boolean
            + getHexagon(int x, int y): Hexagon
            + display(): void
            + hexagonIsSurrounded(Hexagon hexagon): boolean
            + clearGrid(): void
            + getTopHexagons(): ArrayList<Hexagon>
            + placeDeTypeS(String s): ArrayList<Place>
            + nbetoile(ArrayList<Place> place): int
            ==
            Cacule le score
            + calculateScore(): int
            + calculateGardenScore(Hexagon hexagon): int
            + calculateBarrackScore(Hexagon hexagon): int
            + calculateBuildingScore(Hexagon hexagon): int
            + BuildingNeighbors(Hexagon hexagon): ArrayList<Hexagon>
            + calculateTempleScore(Hexagon hexagon): int
            + calculateMarketScore(Hexagon hexagon): int
            + calculatePlaceScore(Place place): int
    }

    enum DistrictColor {
        RED
        BLUE
        GREEN
        YELLOW
        PURPLE
    }

    class District extends Hexagon{
        - DistrictColor color
        ==
        + District(Point3D p, DistrictColor color)
        ==
        + getType(): String
    }

    class Place extends Hexagon{
        - starts : int
        - DistrictColor color
        ==
        + Place(Point3D p, DistrictColor color, int stars)
        ==
        + getStars(): int
        + getType(): String

    }

    class Quarrie extends Hexagon{
        Quarrie(Point3D p, Grid grid)
        Quarrie(Point3D p)
        ==
        + getType(): String
    }

    class StackTiles{
        - int remainingTiles
        ==
        + StackTiles(int size)
        ==
        + generateTiles(): void
        + addPlaceWithStars(DistrictColor color): void
        + generateRandomTiles(): void
        + getRandomDistrict(): Hexagon
        + getRandomColor(): DistrictColor
        + shuffle(): void
    }




}

package util <<Node>>{
    class Point3D {
        - int x
        - int y
        - int z
        ==
        + Point3D(int x, int y, int z)
        ==
        + getX(): int
        + getY(): int
        + getZ(): int
        ==
        + toString(): String
    }

    interface StateMethods{
        + exit(): void
        + transitionTo(State nextState): void
        + enter(): void
    }

    interface StateMachine {
        + getState(): State
        + changState(State state): void
    }

    class State implements StateMethods{
        - State INSTANCE
        ==
        + State()
        + enter(): void
        + exit(): void
        + transitionTo(State nextState): void
    }

    class Tuple<X, Y> {
        - X x
        - Y y
        ==
        + Tuple(X x, Y y)
        ==
        + getX(): X
        + getY(): Y
    }

}

package view <<Node>>{

    class MainMenuView{
        - backgroundImage: BufferedImage
        ==
        + MainMenuView()
        ==
        + paintComponent(Graphics g)
        + startNewGame()
    }

    class HexagonView{
        - size: int
        - isHovered: boolean
        - texture: TexturePaint
        - position: Point3D
        - hexagon: Polygon
        ==
        + HexagonView(x: int, y: int, z: int)
        + HexagonView(x: int, y: int, z: int, img: BufferedImage)
        + HexagonView(x: int, y: int, z: int, color: Color)
        ==
        + contains(x: int, y: int): boolean
        + setPosition(position: Point3D): void
        + getPosition(): Point3D
    }

    class QuarrieView extends HexagonView {
        + paintComponent(Graphics g): void
    }

    class PlaceView extends HexagonView{
        - stars: int
        ==
        + paintComponent(Graphics g): void
    }

    class DistrictView extends HexagonView {
        + paintComponent(Graphics g): void
    }

    class TileView{
        - Boolean isHovered
        - Boolean isClicked
        - boolean increasing
        - float glow
        - Timer glowTimer
        ==
        + TileView(HexagonView hex1, HexagonView hex2, HexagonView hex3)
        ==
        + setHexagon(HexagonView hex1, HexagonView hex2, HexagonView hex3): void
        ==
        + paintComponent(Graphics g): void
    }

    class RockLabel{
        + RockLabel()
        ==
        + setRock(int rock): void
    }

    class TextureFactory {
        + getTexture(String img): TexturePaint
    }

    class ScrollableGridView {
        + ScrollableGridView(Grid grid)
    }

}

package view.main.states <<Node>>{
    enum AppState implements util.StateMachine {
        State currenState
        ==
        + AppState()
        ==
        + getState : State
        changeState(State state): void
    }

    class StartState extends util.State {
        - StartState INSTANCE
        ==
        + StartState()
        ==
        getInstance(): StartState
        ==
        + enter(): void
        + exit(): void
        + transitionTo(State nextState): void
    }

}

package view.main <<Node>>{
    class App {
        - int width
        - int height
        - JPanel screen
        - App INSTANCE
        ==
        + App()
        ==
        + getInstance(): App
        + getScreens(): JPanel
        ==
        + run(): void
    }

}

package controller <<Node>>{
    class BoardController {
    }
}

Grid o-- Hexagon
Game o-- Player
Game o-- Board
Game o-- StackTiles
Player o-- Tile
Hexagon o-- Grid
Board o-- Grid
Game o-- Tile
TileView o-- HexagonView

Hexagon o-- Hexagon
Hexagon o-- Tile
Tile o-- Hexagon

District o-- DistrictColor

util.Point3D o-- Hexagon
util.Point3D o-- Grid

@enduml